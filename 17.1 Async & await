Mục đích của concept này là muốn code xử lý bất đồng bộ này trông gần giống như code đồng bộ
1. Async/ await
Khai báo Async ở trước ở trước function name or trước từ khóa function
This function automatically returns a promise, vì trong function này ko return về gì, nếu bỏ async ra thì return về nothing

async function ketQua() {  -> return a promise
    muaXeSH(20)
    .then(xe => choGaiDiChoi(xe))
    .then(isDiChoi => duaGaiDiNhaNghi(isDiChoi))
    .then(data => {
        console.log(data)
    })
}
ketQua()


- Nó sẽ bao toàn bộ code vào trong 1 promise lớn
- Trong async function, ta khai báo await trước các promise, có vẻ như sẽ chờ function này thực hiện xong và trả kết quả tại đây
- Vậy chúng ta hứng kết quả đó băng cách const xe = muaXeSH(20)
async function ketQua() {
    const xe = await muaXeSH(20)
    .then(xe => choGaiDiChoi(xe))
    .then(isDiChoi => duaGaiDiNhaNghi(isDiChoi))
    .then(data => {
        console.log(data)
    })
}
ketQua()

- Chúng ta ko return về choGaiDiChoi(xe) ở then() nữa, có kết quả có xe rồi thì ta tiếp tục await
async function ketQua() {
    const xe = await muaXeSH(20)
    const isDiChoi = await choGaiDiChoi(xe)
    const data = await duaGaiDiNhaNghi(isDiChoi)
    console.log(data)
}
ketQua()

Những dòng await này nó sẽ return như 1 phần của promise lớn bao bọc và nó có 1 cái block then() vô hình, then() này sẽ lấy kết quả
từ promise nhỏ này và lưu vào trong biến (const xe =)
Cuối cùng thì đằng sau await này nó sẽ mô phỏng hoạt động như những then() block này hoạt động
Hay nói chính xác hơn nó sẽ transform (chuyển đổi) thành phiên bản mà sử dụng then() block
Sau cùng async/await nó không thay đổi cái cách mà JS thực thi mà chỉ transform code để được 1 đoạn code ngắn gọn hơn. dễ đọc hơn
và trông nó như là 1 đoạn code đồng bộ vậy


2. Error handling
Chúng ta sẽ sử dụng 1 bộ xử lý lỗi là try catch
Khi có 1 bước bị lỗi nó sẽ ngưng chạy tiếp và nhảy thẳng vào catch
