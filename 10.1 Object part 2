1. Introducing "this"

Có thể bổ sung vào object 1 func tăng độ linh hoạt cho object
const people = {
  name: 'Quan',
  age: 18.
  getName: function() {          //or getName() {
    return this.name.toUpperCase();
  }
}

-> const name = people.getName();  //như vậy this trong getName sẽ refer people object

Nếu:
let { getName } = people;
-> const name = getName();  //như vậy this sẽ refer global object   -> error

-> sử dụng bind
getName = getName.bind(people); // return new func object
const name = getName();

-> sử dụng call
const name = getName.call(people) // execute right away


2. Bind, call và apply
- bind(): chuẩn bị 1 func cho lần thực thi trong tương lai, return về 1 NEW func object
- call(): thực thi func ngay lập tức
- apply(): như call() // apply thêm params bằng apply(people, [param2, param3]) và call(people, param2, param3)


3. Arrow function with "this"
Arrow func dont know "this" keyword
const example = () => {console.log(this)}
example.call(people) -> sẽ refer đến this của global object


const member() {
  console.log(this)  // refer to global object
}

const member = {
  teamName: 'QD',
  getString() {
    console.log(this)     // refer to "member"
  },
  greet: () => {
        console.log(this.name);  // refer to global object
  },
  getMember() {
    this.people.forEach(p => {
      console.log(this)   // refer to "member" vì arrow func ko thay đổi binding của this
    })
  },
  getTeam(){
    this.people.forEach(function() {
      console.log(this)   // refer to "global object" vì function() thực thi thay cho forEach mà 
    })                        forEach ko thực hiện bất kỳ việc binding nào -> global default  
}


4. getter and setter  (Dùng để thêm validation hoặc thay đổi hình thức value trả về)
const member = {
  set title(val){
    if(val.trim() === '') {
      this._title = 'DEFAULT';
      return;
    }
    this._title = val;
  },
  get title(){
    return this._title || '';
  }
}

Because setters and getters are a special kind of property -> execute like this
-> member.title = 'Quan dep trai'  // set value, not member.title('Quan dep trai')
-> member.title  // get value
