This is behind the scenes of classes & OOP
Contructor function là 1 function được gọi cùng với từ khóa new để tạo ra 1 object dựa trên nó.

1. Introducing Constructor functions
With class
class Person {
  name: 'Quan',
  constructor() {
    this.age = 16
  }
  getInfo(){
    console.log(this.name + ' ' + this.age)
  }
}

Nhưng bản chất của nó thực sự là:
function Person() {   // Vẫn viết hoa từ cái đầu để phân biệt với những function bình thường khác (chỉ là quy ước)
  this.name = 'Quan',
  this.age = 16,
  this.getInfo = function(){
    console.log(this.name + ' ' + this.age)
  }
}

const person = new Person(); // vẫn gọi với từ khóa new giống với class
person.getInfo()

Nếu chúng ta: const person = Person(), sẽ là thực thi 1 function, mà function này không return về giá trị nào 
      -> sẽ ko hiểu person.getInfo()  <=> undefined.getInfo()
Behind the scenes của "new" keyword sẽ là return this;


2. Prototype
- Prototype được tạo tự động khi khởi tạo instance bằng contructor function
- Được phục vụ như 1 object dự phòng
Ex:
- Object person có "name" và "greet()"
-> person.sayHello()
- Javascript sẽ ko báo lỗi ngay mà sẽ access trong person's prototype (prototype cũng là 1 object) 
 để tìm xem có function sayHello() hay không


3. __proto__ trong object
Mỗi object ngoài bao gồm các properties sẽ có 1 invisible base object tên "__proto__"
It's not really a property, bạn có thể gán giá trị cho nó nhưng khuyến cáo là ko nên


4. prototype trong function object
Ta đã biết tất cả những đối tượng như string, function, array đều là object
+ __proto__ sẽ có mặt trên mọi object trong javascript bất kể array, object, hay function,...
+ prototype sẽ chỉ xuất hiện trong function object (contructor function). 
Những gì chúng ta tạo properties hay function trong prototype này sẽ được truyền cho những object được xây dựng trên
Ex: 
const person = new Person()
console.log(person.__proto__ === Person.prototype) 
-> true   //same object in memory


5. Set up on fallback object
function Person() {
  this.name = 'Quan',
  this.age = 16,
  this.getInfo = function(){
    console.log(this.name + ' ' + this.age)
  }
}

Person.prototype = {
  printAge(){
    console.log(this.age)
  }
}

const p = new Person()
-> p.printAge() -> it's work, từ khóa "this.age" đc refer tới p (tới object gọi phương thức)

Đối với class Person extends "something"{} // tức là muốn set prototype của Person thành 1 object mới
                                              hoặc thêm properties or method cho prototype
