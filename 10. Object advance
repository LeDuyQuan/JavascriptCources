Objects are reference values

1. Adding, modify and delete
const people = {
  name: 'Quan',
  age: 18
}

people.address = '35 NH' -> adding

NULL and undefined
Nếu set people.abc = null nghĩa là object people có property là abc chưa có value
Nếu set people.abc = undefined có nghĩa là people không có thuộc tính abc (về mặt kỹ thuật)


2. Special key name and how to access
const people = {
  'first-name': 'Quan',
  'last name': 'Duy',
  age: 18,
  'address': 'Quan 3',
  1.5: 'so thap phan'
}

-> people['first-name']
-> people['last name']
-> people.age
-> people.address
-> people[1.5] or people['1.5']

Thứ tự trong object sẽ được order (sắp xếp) theo key khi output (tương tự array)


3. Sử dụng dynamic properties
const dynamicName = 'first name';

const people = {
  [dynamicName]: 'Quan',
  'last name': 'Duy'
}

-> people[dynamicName]


4. Loop
const object = { a: 1, b: 2, c: 3 };

for (const property in object) {
  console.log(`${property}: ${object[property]}`);
}


5. Spread operator
const people = {
  name: 'Quan',
  hobbies: ['Sport', 'Cooking']
}

Nếu muốn copy thì dùng spread operator (vì object là reference value)
const people1 = {...people}

Tuy nhiên array hobbies trong object people cũng là reference value nên sẽ không đc clone (same in memory)
-> const people1 = {...people, hobbies: [...people.hobbies]}


6. Object.assign(object1, object2)
+ object2 được merge vào object1
+ Copy: Object.assign({}, object) <=> {...object}


7. Object destructuring
const people = {name: 'Quan', age: 18, address: 'NTS'}
//const name = people.name
//const age = people.age
-> const { name, age } = people;

sử dụng spread operator để tạo object chứa những properties còn lại
-> const { name, ...others } = people;

Nếu muốn thay đổi tên field:
-> -> const { name: nameObject, age } = people;
